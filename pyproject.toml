[project]
name = "dbf_test"
version = "2024.4.11"
dependencies = ["coloredlogs~=15.0.1", "isal~=1.6.0", "rpy2~=3.5.15"]

[project.scripts]
dbf_test = "dbf_test.__main__:main"

[tool.setuptools.packages.find]
include = ["dbf_test"]

[tool.pyright]
typeCheckingMode = "strict"

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
select = [
    "A",    # flake8-builtins
    "ANN",  # flake8-annotations
    "B",    # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "E",    # Error
    "EXE",  # flake8-executable
    "F",    # Pyflakes
    "FA",   # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "G",    # flake8-logging-format
    "I",    # isort
    "INP",  # flake8-no-pep420
    "ISC",  # flake8-implicit-str-concat
    "N",    # pep8-naming
    "PERF", # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",   # Pylint
    "PT",   # flake8-pytest-style
    "PTH",  # flake8-use-pathlib -- long term goal
    "PYI",  # flake8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slots
    "T10",  # flake8-debugger
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]

ignore = [
    "ANN101", # missing-type-self -- Missing type annotation for `self` in method
    "ANN102", # missing-type-cls -- Missing type annotation for `cls` in classmethod
    # Disabled due to too many false positives
    "PLR2004", # magic-value-comparison -- Magic value used in comparison
    # Disabled due to personal style preferences
    "PLW2901", # redefined-loop-name -- `for` loop variable `value` overwritten
    "RET505",  # superfluous-else-return -- Unnecessary `elif` after `return` statement
    "RET506",  # superfluous-else-raise -- Unnecessary `elif` after `raise` statement
    "RET507",  # superfluous-else-continue --Unnecessary `elif` after `continue`
    "RET508",  # superfluous-else-break -- Unnecessary `elif` after `break` statement
    # Disabled due to hits in non-performance critical code where manual is clearer
    "PERF401", # manual-list-comprehension -- Use a list comprehension
    # Disabled due to conflict with `format` command
    "ISC001", # single-line-implicit-string-concatenation
    # Complexity warnings disabled for now
    "PLR0904", # too-many-public-methods
    "PLR0911", # too-many-return-statements
    "PLR0912", # too-many-branches
    "PLR0913", # too-many-arguments
    "PLR0915", # too-many-statements
    "PLR0916", # too-many-boolean-expressions
]
