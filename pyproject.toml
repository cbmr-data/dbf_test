[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "dbf_test"
dynamic = ["version"]

authors = [{ name = "Mikkel Schubert", email = "MikkelSch@gmail.com" }]
license = { file = "LICENSE" }
description = "Parallelized wrapper for running DBF Test on VCFs containing biallelic variants"
readme = { file = "README.md", content-type = "text/markdown" }

requires-python = ">=3.10"
dependencies = ["coloredlogs~=15.0.1", "isal~=1.6.0", "rpy2~=3.5.15"]

[project.urls]
Homepage = "https://github.com/cbmr-data/dbf_test"
Repository = "https://github.com/cbmr-data/dbf_test.git"
Issues = "https://github.com/cbmr-data/dbf_test/issues"

[project.scripts]
dbf_test = "dbf_test.__main__:main"


[tool.setuptools]
packages = ["dbf_test"]

[tool.setuptools.dynamic]
version = { attr = "dbf_test.__version_str__" }


[tool.pyright]
# Used since `strict = [...]` prevents individual `reportX` settings:
include = ["dbf_test", "typings", "noxfile.py"]
typeCheckingMode = "strict"
stubPath = "typings"

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]

ignore = [
    # Rules either deemed too burdonsome to implement or not useful
    "C90", # mccabe -- Complexity measures not deemed useful
    "COM", # flake8-commas -- Formatting handled by ruff/black
    "D",   # pydocstyle
    "ERA", # eradicate
    "EM",  # flake8-errmsg
    "T20", # flake8-print
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "S",   # flake8-bandit
    # Individual rules deemed too burdonsome or not useful
    "ANN101", # missing-type-self -- Missing type annotation for `self` in method
    "ANN102", # missing-type-cls -- Missing type annotation for `cls` in classmethod
    "S603",   # subprocess-without-shell-equals-true
    "TRY003", # raise-vanilla-args
    # Disabled due to too many false positives
    "PLR2004", # magic-value-comparison -- Magic value used in comparison
    # Disabled due to personal style preferences
    "PLW2901", # redefined-loop-name -- `for` loop variable `value` overwritten
    "RET505",  # superfluous-else-return -- Unnecessary `elif` after `return` statement
    "RET506",  # superfluous-else-raise -- Unnecessary `elif` after `raise` statement
    "RET507",  # superfluous-else-continue --Unnecessary `elif` after `continue`
    "RET508",  # superfluous-else-break -- Unnecessary `elif` after `break` statement
    # Disabled due to hits in non-performance critical code where manual is clearer
    "PERF401", # manual-list-comprehension -- Use a list comprehension
    # Disabled due to conflict with `format` command
    "ISC001", # single-line-implicit-string-concatenation
    # Complexity warnings disabled for now
    "PLR09", # too-many-*
]
